dist: xenial
language: go
sudo: required

# from https://github.com/water-hole/ansible-operator/blob/master/.travis.yml

go:
  - 1.13

go_import_path: github.com/vernemq/vmq-operator

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config
    - OP_SDK_RELEASE=v0.12.0

install:
  # setup operator-sdk
  - curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${OP_SDK_RELEASE}/operator-sdk-${OP_SDK_RELEASE}-x86_64-linux-gnu
  - chmod +x operator-sdk-${OP_SDK_RELEASE}-x86_64-linux-gnu && sudo mkdir -p /usr/local/bin/ && sudo cp operator-sdk-${OP_SDK_RELEASE}-x86_64-linux-gnu /usr/local/bin/operator-sdk && rm operator-sdk-${OP_SDK_RELEASE}-x86_64-linux-gnu
  - cd $GOPATH/src/github.com/vernemq/vmq-operator
  - go mod tidy
  - operator-sdk build vernemq/vmq-operator:travis

jobs:
  include:
    - stage: test
      before_script:
        # Download kubectl, which is a requirement for using minikube.
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        # Download minikube.
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.13.0 
        - "sudo chown -R travis: /home/travis/.minikube/"
        # Wait until node is ready
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      script:
        # create example CRD and operator
        - sed -i 's/vernemq\/vmq-operator:latest/vernemq\/vmq-operator:travis/g' examples/only_vernemq/0vernemq-operator-deployment.yaml
        - sed -i 's/imagePullPolicy:\ Always/imagePullPolicy:\ IfNotPresent/g' examples/only_vernemq/0vernemq-operator-deployment.yaml
        - kubectl create -f examples/only_vernemq/
        - sleep 10
        - kubectl apply -f examples/only_vernemq/
        - (kubectl --namespace messaging get deployment | grep vernemq) ; while [ $? -ne 0 ] ; do sleep 5 && kubectl --namespace messaging get deployment && (kubectl --namespace messaging get deployment | grep vernemq) ; done
        - vernemq_deployment=$(kubectl --namespace messaging get deployment | grep vernemq | awk '{print $1}')
        - kubectl --namespace messaging rollout status deployment/${vernemq_deployment}
        - vernemq_deployment_pod=$(kubectl get pods --namespace messaging | grep $vernemq_deployment | awk '{print $1}')
        - kubectl --namespace messaging logs $vernemq_deployment_pod
        - (kubectl --namespace messaging get statefulset | grep vernemq) ; while [ $? -ne 0 ] ; do sleep 5 && kubectl --namespace messaging get statefulset && (kubectl --namespace messaging get statefulset | grep vernemq) ; done
        - vernemq_statefulset=$(kubectl --namespace messaging get statefulset | grep vernemq | awk '{print $1}')
        - kubectl --namespace messaging rollout status statefulset/${vernemq_statefulset}
        # delete VerneMQ resource
        - kubectl delete -f examples/only_vernemq/0vernemq-operator-0vernemqCustomResourceDefinition.yaml
        - kubectl --namespace messaging wait vernemq/k8s --for=delete --timeout=1m || true
    - stage: deploy
      script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker tag vernemq/vmq-operator:travis vernemq/vmq-operator:latest
        - docker push vernemq/vmq-operator:latest

    - stage: deploy-release
      script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker tag vernemq/vmq-operator:travis vernemq/vmq-operator:${TRAVIS_TAG}
        - docker push vernemq/vmq-operator:${TRAIVS_TAG}
stages:
  - test
  - name: deploy
    if: (tag IS blank) AND (branch = master) AND (type = push)
  - name: deploy-release
    if: (tag IS present) AND (type = push)
