// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.ConfigItem":       schema_pkg_apis_vernemq_v1alpha1_ConfigItem(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Listener":         schema_pkg_apis_vernemq_v1alpha1_Listener(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Plugin":           schema_pkg_apis_vernemq_v1alpha1_Plugin(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.PluginSource":     schema_pkg_apis_vernemq_v1alpha1_PluginSource(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.ReloadableConfig": schema_pkg_apis_vernemq_v1alpha1_ReloadableConfig(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.StorageSpec":      schema_pkg_apis_vernemq_v1alpha1_StorageSpec(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.TLSConfig":        schema_pkg_apis_vernemq_v1alpha1_TLSConfig(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQ":          schema_pkg_apis_vernemq_v1alpha1_VerneMQ(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQSpec":      schema_pkg_apis_vernemq_v1alpha1_VerneMQSpec(ref),
		"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQStatus":    schema_pkg_apis_vernemq_v1alpha1_VerneMQStatus(ref),
	}
}

func schema_pkg_apis_vernemq_v1alpha1_ConfigItem(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigItem defines a single reloadable VerneMQ config item",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the name of the config",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the value of the config",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_Listener(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Listener defines the listeners to be started !!! Make sure that the JSON name of the property converted to snake-case results in the value accepted by vmq-admin listener start",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the Network address the listener accepts connections on. Alternatively pass the name of the network interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the TCP port",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"mountpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the mountpoint for this listener. Defaults to \"\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nrOfAcceptors": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the number of TCP acceptor processes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxConnections": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the number of allowed concurrent TCP connections.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"allowedProtocolVersions": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the allowed MQTT protocol version. Specified as a comma separated list e.g. \"3,4,5\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"websocket": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies that this listener accepts connections over HTTP websockets.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable PROXY v2 protocol for this listener",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"useCnAsUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "If PROXY v2 is enabled for this listener use this flag to decide if the common name should replace the MQTT username Enabled by default (use `=false`) to disable",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tlsConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The TLS Config.",
							Ref:         ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.TLSConfig"),
						},
					},
				},
				Required: []string{"address", "port"},
			},
		},
		Dependencies: []string{
			"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.TLSConfig"},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_Plugin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Plugin defines the plugins to be enabled by VerneMQ",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the plugin application",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "The path to the plugin application",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preStart": {
						SchemaProps: spec.SchemaProps{
							Description: "Commands to execute before the plugin is started",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Command"),
									},
								},
							},
						},
					},
					"postStart": {
						SchemaProps: spec.SchemaProps{
							Description: "Commands to execute after the plugin is started",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Command"),
									},
								},
							},
						},
					},
					"preStop": {
						SchemaProps: spec.SchemaProps{
							Description: "Commands to execute before the plugin is stopped",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Command"),
									},
								},
							},
						},
					},
					"postStop": {
						SchemaProps: spec.SchemaProps{
							Description: "Commands to execute after the plugin is stopped",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Command"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Command"},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_PluginSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PluginSource defines the plugins to be fetched, compiled and loaded into the VerneMQ container",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"applicationName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the plugin application",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"repoURL": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the Git repository",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versionType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type to checkout, can be \"branch\", \"tag\", or \"commit\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "The version to checkout, can be name of the branch or tag, or the Git commit ref",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"applicationName", "repoURL", "versionType", "version"},
			},
		},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_ReloadableConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReloadableConfig defines the reloadable parts of the VerneMQ configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"plugins": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the plugins to enable when VerneMQ starts",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Plugin"),
									},
								},
							},
						},
					},
					"listeners": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the listeners to enable when VerneMQ starts",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Listener"),
									},
								},
							},
						},
					},
					"configs": {
						SchemaProps: spec.SchemaProps{
							Description: "Configures VerneMQ, valid are all the properties that can be set with the `vmq-admin set` command",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.ConfigItem"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.ConfigItem", "github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Listener", "github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.Plugin"},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_StorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageSpec defines the configured storage for VerneMQ Cluster nodes. If neither `emptyDir` nor `volumeClaimTemplate` is specified, then by default an [EmptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) will be used.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"emptyDir": {
						SchemaProps: spec.SchemaProps{
							Description: "EmptyDirVolumeSource to be used by the VerneMQ StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
							Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
						},
					},
					"volumeClaimTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "A PVC spec to be used by the VerneMQ StatefulSets.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaim"},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_TLSConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TLSConfig defines the TLS configuration used for a TLS enabled listener !!! Make sure that the JSON name of the property converted to snake-case results in the value accepted by vmq-admin listener start",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cafile": {
						SchemaProps: spec.SchemaProps{
							Description: "The path to the cafile containing the PEM encoded CA certificates that are trusted by the server.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"certfile": {
						SchemaProps: spec.SchemaProps{
							Description: "The path to the PEM encoded server certificate",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyfile": {
						SchemaProps: spec.SchemaProps{
							Description: "The path to the PEM encoded key file",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ciphers": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of allowed ciphers, each separated by a colon",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requireCertificate": {
						SchemaProps: spec.SchemaProps{
							Description: "Use client certificates to authenticate your clients",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"useIdentityAsUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "If RequreCertificate is true then the CN value from the client certificate is used as the username for authentication",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"crlfile": {
						SchemaProps: spec.SchemaProps{
							Description: "If RequreCertificate is true, you can use a certificate revocation list file to revoke access to particular client certificates. The file has to be PEM encoded.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"cafile", "certfile", "keyfile"},
			},
		},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_VerneMQ(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerneMQ is the Schema for the vernemqs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQSpec", "github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.VerneMQStatus"},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_VerneMQSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerneMQSpec defines the desired state of VerneMQ",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podMetadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object’s metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata Metadata Labels and Annotations gets propagated to the vernemq pods.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size is the size of the VerneMQ deployment",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version of VerneMQ to be deployed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag of VerneMQ container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha": {
						SchemaProps: spec.SchemaProps{
							Description: "SHA of VerneMQ container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the VerneMQ Operator knows what version of VerneMQ is being configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"baseImage": {
						SchemaProps: spec.SchemaProps{
							Description: "Base image to use for a VerneMQ deployment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional list of references to secrets in the same namespace to use for pulling vernemq images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext holds pod-level security attributes and common container settings. This defaults to non root user with uid 10000 and gid 10000 for VerneMQ >1.7.0 and default PodSecurityContext for other versions.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage spec to specify how storage shall be used.",
							Ref:         ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.StorageSpec"),
						},
					},
					"containers": {
						SchemaProps: spec.SchemaProps{
							Description: "Containers allows injecting additional containers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Define resources requests and limits for single Pods.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountName is the name of the ServiceAccount to use to run the VerneMQ Pods.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Define which Nodes the Pods are scheduled on.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "Priority class assigned to the Pods",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints.",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"dropoutPeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"terminationGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets is a list of Secrets in the same namespace as the VerneMQ object, which shall be mounted into the VerneMQ Pods. The Secrets are mounted into /etc/vernemq/secrets/<secret-name>.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"configMaps": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VerneMQ object, which shall be mounted into the VerneMQ Pods. The ConfigMaps are mounted into /etc/vernemq/configmaps/<configmap-name>.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"vmqConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the config that is used when starting VerneMQ (similar to vernemq.conf)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vmArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the arguments passed to the erlang VM when starting VerneMQ",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines additional environment variables for the VerneMQ container The environment variables can be used to template the VMQConfig and VMArgs",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"bundlerVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Version of the Plugin Bundler to be deployed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bundlerTag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag of Plugin Bundler container image to be deployed. Defaults to the value of `bundlerVersion`. BundlerVersion is ignored if BundlerTag is set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bundlerSHA": {
						SchemaProps: spec.SchemaProps{
							Description: "SHA of Plugin Bundler container image to be deployed. Defaults to the value of `bundlerVersion`. Similar to a tag, but the SHA explicitly deploys an immutable container image. BundlerVersion and BundlerTag are ignored if SHA is set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bundlerImage": {
						SchemaProps: spec.SchemaProps{
							Description: "BundlerImage if specified has precedence over bundlerBaseImage, bundlerTag and bundlerSha combinations. Specifying the bundlerVersion is still necessary to ensure the VerneMQ Operator knows what version of the Plugin Bundler is being configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bundlerBaseImage": {
						SchemaProps: spec.SchemaProps{
							Description: "Bundler Base image to use for a VerneMQ Plugin Bundler deployment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalPlugins": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines external plugins that have to be compiled and loaded into VerneMQ",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.PluginSource"),
									},
								},
							},
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the reloadable config that VerneMQ regularly checks and applies",
							Ref:         ref("github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.ReloadableConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.PluginSource", "github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.ReloadableConfig", "github.com/vernemq/vmq-operator/pkg/apis/vernemq/v1alpha1.StorageSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_vernemq_v1alpha1_VerneMQStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerneMQStatus defines the observed state of VerneMQ",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes are the names of the VerneMQ pods",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"nodes"},
			},
		},
	}
}
